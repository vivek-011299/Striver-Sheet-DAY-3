/*
*
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
*
*/

Solution :-   (Most efficient i.e. O(log(nm)) )

bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int low=0;
        int n=matrix.size();
        int m=matrix[0].size();
        int high = (n*m)-1;
        while(low<=high)
        {
            int mid = (low+high)/2;
            int row = mid/m;
            int col = mid%m;
            if(matrix[row][col]==target)
            {
                return true;
            }
            else if(matrix[row][col]<target)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return false;
    }
