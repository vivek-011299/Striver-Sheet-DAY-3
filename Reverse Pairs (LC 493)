/*
*
Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].
*
*/

Solution :-

 int merge(vector<int> &nums,int l,int mid,int h)
    {
        int cnt=0;
        int j=mid+1;
        for(int i=l;i<=mid;i++)
        {
            while(j<=h && nums[i]>2LL *nums[j])
            {
                j++;
            }
            cnt+=(j-(mid+1));
        }
        vector<int> temp;
        int left=l;
        int right=mid+1;
        while(left<=mid && right<=h)
        {
            if(nums[left]<=nums[right])
            {
                temp.push_back(nums[left++]);
            }
            else
                temp.push_back(nums[right++]);
        }
        while(left<=mid)
        {
            temp.push_back(nums[left++]);
        }
        while(right<=h)
        {
            temp.push_back(nums[right++]);
        }
        for( int i=l;i<=h;i++)
        {
            nums[i]=temp[i-l];
        }
        return cnt;
    }
    int merge_sort(vector<int> &nums,int l,int h)
    {
        if(l>=h)
            return 0;
        int mid=(l+h)/2;
        int inv=merge_sort(nums,l,mid);
        inv+=merge_sort(nums,mid+1,h);
        inv+=merge(nums,l,mid,h);
        return inv;
    }
    int reversePairs(vector<int>& nums) {
        return merge_sort(nums,0,nums.size()-1);
    }
